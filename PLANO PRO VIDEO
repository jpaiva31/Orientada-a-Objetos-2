Boa noite. Vou apresentar um sistema que simula uma lavagem de pratos, problema clássico da programação concorrente.

Primeiramente, vou mostar a classe Prato, que tem um ENUM de nível de sujeira com as opções "Baixo", "Medio" e "Engordurado".
Tem tabém o atributo "numero de série", que é sequencial entre os Pratos e é controlado por meio desse atributo estático da classe, "proximoNumeroDeSerie", que é incrementado aqui no construtor do Prato. O último atributo do Prato é nivelSujeira, que é do tipo "NivelSujeira", ou seja, pode ser BAIXO, MEDIO ou ENGORDURADO.
Aqui temos os getters da classe prato Prato e aqui seu construtor. Em seu construtor, ele seta o nível de sujeira do prato de acordo com o que ele recebe de parametro, ou seja, quem criar o prato que vai definir seu nível de sujeira, que no caso é o PratosSujosFactory.

Na classe PratosSujosFactory, tem um método setNívelSSujeira, que retorna o nível do prato aleatoriamente, onde ele pega um numero aleatorio de 0 a 99, e caso esse numero seja menor que 30, o nível de sujeira do prato é baixo, caso seja 30 ou menor que 90, o nivel de sujeira será medio e caso seja 90 ou maior, o nivel de sujeira será Engordurado. Ou seja, tem 30% de chance do nível ser baixo, 60 de ser medio e 10 de ser engordurado.

Nós temos também a classe Escorredor, que vai ter uma lista de Pratos, vai ter um tamanho maximo estático de 10 e o logger, que vai ser utilizado para a gente ter um controle do que ta acontecendo.
Essa classe tem os métodos "tamanhoFila", "filaVazia", "filaCheia".
E tem também o método sincronizado adicionarPrato, que verifica se a fila está cheia e, caso esteja, ele ficarar esperando(com o wait) enquanto ela estiver cheia. Caso aconteça da quantidade de pratos no escorredor ultrapassar o valor máximo, ele dar throw num erro avizando que não pode mais por pratos. Daí ele adiciona o prato no final da lista usando o método "addLast" e, caso após a inserção do prato na lista, a lista ficar cheia, ele da um log avisando a situação. Por fim, ele notifica as outras threads que um prato foi adicionado.
Essa classe também tem o método "removerPrato", que primeiramente verifica se a fila de pratos está vazia, e caso esteja, vai ficar esperando(também com um wait), depois vai verificar se a fila ta vazia, caso sim da throw no erro avisando que não é possível remover prato. Depois ele vai remover o primeiro item da fila usando o método "poolFirst", caracterizando a fila como uma fila circular, já que quando adiciona um prato, ele adiciona no fim e quando remove, ele remove a primeira. Depois ele verifica se a fila está vazia e, se sim, ele da um log que o total de pratos é 0. Depois ele da um notify para as outras threads que um prato foi removido e retorna o prato que foi removido, como se fosse um pop mesmo.
Por ultimo, temos o construtor, que só seta os Logs aqui e inicializa a lista de pratos.

Temos tambem uma classe Enxugador, que é declarada com esse implements Runnable, que a define como uma Thread que vai ter o método run(). Essa classe tem os atributos escorredor, do tipo Escorredor, tem tambem o Logger, para registro dos logs, e um booleano "emExecucao", que é pra controlar quando a thread deve parar. 
Ela vai ter um método changeEmExecucao, que troca o valor do booleano emExecucao. No método run, nós temos que, enquanto emExecucao for true ou a fila não tiver vazia, ele vai chamar o método removerPrato, do escorredor, que vai remover o prato da fila de pratos e retornar o prato removido pra ca. Depois, ele vai calcular o tempo que essa thread vai demorar para enxugar o prato, e isso é um valor aleatório entre 3 e 10(Ele vai pegar um numero aleatorio de 0 a 7 e depois somar com 3).
Depois disso, ele avisa que ta enxugando um prato, fala qual seu nível de sujeira e quanto tempo vai demorar enxugando esse prato. Para simular ele enxugando o prato, a thread vai dormir, usando o método sleep, passando o tempo de enxugamento.

Nós teremos a classe Lavador, que vai ter também o escorredor estático, também um logger, e também um booleano de emExecucao. Vai ter tambem o método de alterar o valor de emExecucao, vai ter um método que vai calcular o tempo que vai demorar lavando um prato, variando dependendo do nivel de sujeira do prato. Se o nivel for baixo, ele vai demorar 3ms, se for médio ele vai demorar 5ms e se estiver engordurado, ele vai demorar 10ms.
Em seu runnable, ele vai utilizar o PratosSujosFactory para criar um prato sujo, com um nível de sujeira aleatorio, como ja vimos, ele vai calcular o tempo de lavagem chamando seu método que faz esse calculo, ele vai dar um log avisando qual prato está lavando e quanto tempo vai demorar fazendo isso, vai dormir para simular que está lavando o prato e no final, qunado o prato estiver limpo, ele vai chamar o método adicionarPrato do escorredor, para adicionar o prato limpo no final da fila de pratos.

Para finalizar, nós temos nosso App, que em seu construtor vai inicializar o escorredor, o enxugador, o lavador, a thread do lavador e a thread do enxugador. Ele vai ter esse setUncaughtExceptionHandler para pegar caso alguma das threads dê um throw no erro, e caso isso aconteça, ele vai encerrar a aplicação.
Teremos o método work no nosso app, que inicializa as threads e o método stop, que altera a variavel emExecucao das nossas threads, fazendo que elas parem, no caso do lavador, para instantaneamente, já que ele que faz com que o factory crie pratos sujos, e no caso do enxugador, quando não houverem mais pratos para enxugar.
Na main do nosso App, ele chama o método work, para inicializar as threads, dorme por 2 minutos, para as threads irem lavando e enxugando pratos, e após os 2 minutos ele chama o método stop para finalizar as threads.
